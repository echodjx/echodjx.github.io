<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TCP/IP协议</title>
      <link href="/2021/07/11/tcpip-xie-yi/"/>
      <url>/2021/07/11/tcpip-xie-yi/</url>
      
        <content type="html"><![CDATA[<p>  这里是参考《Linux高性能服务器编程》这本书归纳的一些笔记，配图为本书或者网上的图，内容可能不全，梳理下知识点，网络编程面试问的挺多的。</p><h2 id="TCP-IP协议族及主要协议"><a href="#TCP-IP协议族及主要协议" class="headerlink" title="TCP/IP协议族及主要协议"></a>TCP/IP协议族及主要协议</h2><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/TCPIP.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="RUNOOB 图标"></p><p>​    TCP/IP协议族是一个四层协议系统，上层的协议使用下层的协议来实现，这幅图应用层的协议不是很全。</p><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>​    处于物理层之上，屏蔽了不同的电气特性，实现了网卡接口的网络驱动程序。</p><p>​    两个主要的协议为ARP（地址解析协议）与RARP协议（逆向地址解析协议）负责MAC地址与ip地址之间的转换</p><p><strong>原因：</strong></p><p>​    网络层使用IP地址寻址机器，而数据链路层使用物理地址来寻址一台机器，网络层需要有目标的IP地址，还需要根据IP地址找到对应的mac地址的机器。ARP将IP地址转化为MAC地址，RARP，在一些难以存储自身IP地址的设备上，MAC地址机器都知道，根据自身的MAC地址向管理者（服务器或管理软件）查询IP地址</p><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h4><p>​    ARP能实现<strong>任意网络地址</strong>到<strong>任意物理地址</strong>的转换，这边仅讨论IP地址到MAC地址转换。</p><p><strong>工作原理：</strong></p><p>​    主机向自己所在的网络广播一个ARP请求，该请求包含目标机器的网络地址。此网络的其他机器都将收到这个请求，但只有一个被请求的目标机器会回应一个ARP应答，其中包含自身的物理地址。</p><p>​    广播ARP请求-单播ARP回应。</p><p><strong>请求/应答报文</strong></p><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/ARP.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="ARP"></p><ul><li>硬件类型代表物理地址类型，值为1表示MAC地址</li><li>协议类型代表要映射的协议地址类型，值为0x800，表示IP地址</li><li>硬件地址长度与协议地址长度，mac地址长度为6，IPV4的地址长度为4</li><li>操作字段代表4中操作类型：ARP请求（值为1）、ARP应答（值为2）、RARP请求（值为3）和RARP应答（值为4）</li></ul><p><strong>ARP高速缓存</strong></p><p>​    ARP维护一个高速缓存，包含经常访问（比如网关地址）或最近访问的机器的IP地址到物理地址的映射、避免了重复的ARP请求提高收发数据包的速度。</p><p><strong>使用arp -a查看缓存</strong></p><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/arp-a.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="ARP-a"></p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>​    IP协议（Internet Protocal，因特网协议）是网络层的核心，网络层屏蔽了底层路由器间的转发、不同局域网与广域网间的消息传递，提供端到端的通信。</p><p>​    ICMP（Internet Control Message Protocol,因特网控制报文协议），它是IP协议的重要补充，主要用于检测网络连接。</p><h4 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h4><p><strong>IP协议的特点：</strong></p><ul><li>无状态<ul><li>IP通信双方不同步传输数据状态信息</li><li>所有IP数据报发送、传输、接收都是相互独立的</li><li>IP数据报头部提供了<strong>标识字段</strong>以标识一个IP数据报，但它是被用来处理IP分片和种族的，不是来指示接收顺序</li><li>无状态简单高效，UPD与HTTP协议都是无状态的</li></ul></li><li>无连接<ul><li>通信双发不长久的维持对方信息</li><li>每次发送都指明对方IP地址</li></ul></li><li>不可靠<ul><li>只能知道发送失败、但不会尝试重传</li><li>需要上层协议的重传机制来保证可靠</li></ul></li></ul><p><strong>IPv4头部结构</strong></p><p>20字节固定 40字节可选</p><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/IPv4.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="IPv4"></p><ul><li><p>4位版本号：</p><ul><li>指定IP协议版本 IPv4 值为4</li><li>其他IPv4拓展版本（SIP，PIP）有不同的版本号</li></ul></li><li><p>4位头部长度：</p><ul><li>标识IP头部有多少32bit字（4个字节）</li><li>4位最大值为15 IP头部最大为60</li></ul></li><li><p>8位服务类型</p><ul><li>3位优先权字段（现在忽略）</li><li>4位TOS字段，分别表示：<ul><li>最小延时</li><li>最大吞吐量</li><li>最高可靠性</li><li>最小费用</li></ul></li><li>1位保留字段（必须置0）</li></ul></li><li><p>16位总长度</p><ul><li>指整个IP数据报的长度，以字节为单位</li><li><strong>最大长度65535</strong> 16位</li></ul></li><li><p>16位标识</p><ul><li>唯一地标识主机发送的每一个数据报</li><li>初始值随机生成</li><li>每发一个值就加一</li></ul></li><li><p>3位标志字段</p><ul><li>第一位保留</li><li>第二位表示禁止分片</li><li>第三位表示更多分片 除了最后一个分片，其他分片都要把它置1</li></ul></li><li><p>13位分片偏移</p><ul><li>分片相对于原始IP数据报开始处的偏移</li></ul></li><li><p>8位生存时间</p><ul><li>数据报到达目的地之前允许经过的路由器跳数</li><li>每经过一个路由器，值减一</li><li>减为0还没到，像源端发送ICMP差错报文</li><li>防止数据陷入路由循环</li></ul></li><li><p>8位协议</p><ul><li>用来区分上层协议</li></ul></li><li><p>16位头部校验和</p><ul><li>使用CRC算法检验IP数据报头部在传输过程中是否损坏</li></ul></li><li><p>32位源端IP地址</p></li><li><p>32位目的端IP地址</p></li><li><p>可选40字节</p><ul><li>记录路由</li><li>时间戳</li><li>松散源路由选择</li><li>严格源路由选择</li></ul></li></ul><p><strong>IP分片</strong></p><p>  最大传输单元（Maximum Transmission Unit，MTU）用来通知对方所能接受数据服务单元的最大尺寸，说明发送方能够接受的有效载荷大小。</p><p>  IP数据报长度超过帧的MTU时，它将被分片传输。</p><p>  分片发生在发送端，也可能在中转路由器上</p><p>  以太网帧的MTU是1500字节</p><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/mtu.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="MTU"></p><p> 所以一个报文携带的数据部分最大为1480字节（20个头部）</p><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/ICMPsplite.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="splite"></p><p>​    可见一个1501字节的IP数据报 超过1500，进行分片，第二个无需ICMP头部，仅数据，第一个IP分片设置了MF标志，第二个没有设置这个标志，因为它就是最后一个。</p><p><strong>IPv6头</strong></p><p>​    IPv6头部由40字节的固定头部和可变长的扩展头部组成。</p><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/IPv6.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="IPv6"></p><ul><li><p>4位版本号</p><ul><li>指定IP协议的版本，IPv6值为6</li></ul></li><li><p>8位通信类型</p><ul><li>指示数据流通信类型或优先级，和IPv4中TOS类似</li></ul></li><li><p>20位流标签</p><ul><li>用于某些对连接服务质量由特殊要求的通信，比如音频与视频等实时数据传输</li></ul></li><li><p>16位净荷长度</p><ul><li>指扩展头部与应用程序数据长度之和，不包含<strong>固定头部长度</strong></li></ul></li><li><p>8位下一个包头</p><ul><li>指紧跟IPv6固定头部后的包头类型，如拓展头或某个上层协议头</li></ul></li><li><p>8位跳数限制</p><ul><li>类似IPv4TTL</li></ul></li></ul><p>32位表示IPv地址用点分十进制表示如“127.0.0.1”，而IPv6使用十六进制字符串表示，如“FE80:0000:0000:0000:1134:5678:0000:0012​ ​”</p><p>IPv6扩展头部使IPv6支持更多选项</p><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/IPv6add.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="IPv6"></p><h4 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h4><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/ICMP.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="ICMP"></p><p>ICMP协议主要用于网络连接。</p><ul><li><p>8位类型区分报文类型</p><ul><li>差错报文，回应网络错误，目标不可达与重定向</li><li>查询报文，查询网络信息 Ping就是基于ICMP报文查看目标是否可达</li></ul></li><li><p>8位代码</p><ul><li>有些ICMP通过这8位进一步细分不同条件</li></ul></li><li><p>16位校验和</p><ul><li>对整个报文（头与内容）进行CRC，检测是否在传输过程中损坏</li></ul></li></ul><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>​    传输层提供端到端的通信。</p><p>​    传输层主要协议有三个：TCP协议、UDP协议、SCTP协议。</p><h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><p>​    TCP协议（传输控制协议）为应用层提供可靠的、面向连接的和基于流的服务。</p><p>​    TCP相对于UDP的三大特点：</p><ul><li><p>面向连接</p><ul><li>使用TCP协议通信的双方先建立连接，然后进行数据的读写，双方为连接分配<strong>必要的内核资源</strong> ，以管理连接的状态和连接上数据的</li></ul><p>传输。TCP连接是<strong>全双工</strong>的，双方的数据读写可以通过<strong>一个</strong>连接进行，完成数据交换后，通信双方断开连接以释放系统资源。</p><ul><li>TCP协议的连接是<strong>一对一</strong>的，基于广播与多播的应用程序不使用TCP，UDP适合广播与多播。</li></ul></li><li><p>字节流</p><ul><li>发送端执行的写操作次数和接收端执行的读操作次数之间没有任何数量关系。</li></ul></li><li><p>可靠传输</p><ul><li>三次握手</li><li>四次挥手</li><li>超时重传</li><li>流量控制</li><li>拥塞控制</li><li>慢启动</li></ul></li></ul><h5 id="TCP头部结构"><a href="#TCP头部结构" class="headerlink" title="TCP头部结构"></a>TCP头部结构</h5><pre><code> TCP头部结构如下，为**管理TCP连接**和**控制数据流**提供信息</code></pre><p><img "" class="lazyload placeholder" data-original="http://djxblogimg.test.upcdn.net/tcpIP/TCP.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="TCP"></p><ul><li><p>16位端口号</p><ul><li>源端口</li><li>目的端口</li><li>TCP通信时客户端使用临时端口号</li><li>服务器端使用知名端口号<ul><li>DNS:53</li><li>HTTP:80</li><li>ftp控制:21</li><li>ftp数据:20</li><li>telent:23</li><li>https:443</li></ul></li></ul></li><li><p>32位序号</p><ul><li>一次TCP通信过程中某个传输方向上的字节流的每个字节的<strong>编号</strong></li><li>如传输的时字节流中1025-2048字节，序号值为：ISN（随机的初始序号值）+1025</li><li></li></ul></li><li><p>32位确认号</p><ul><li>对另一方发送来的TCP报文段的响应</li><li>值为<strong>收到</strong>的TCP报文段的值加1</li></ul></li><li><p>4位头部长度</p><ul><li>标识该TCP头部有多少个32bit字（4字节）。头部最长为60字节</li></ul></li><li><p>6位标志位</p><ul><li>URG标志：表示紧急指针是否有效</li><li>ACK标志：表示确认号是否有效</li><li>PSH标志：提示接收端应用程序应该立即从TCP接收缓冲区中读走数据，为接收后续数据腾出空间</li><li>RST标志：表示要求对方重新建立连接。（也称复位报文段）</li><li>SYN标志：表示请求建立一个连接。（也称同步报文）</li><li>FIN标志：表示通知对方本端要关闭连接（也称结束报文段）</li></ul></li><li><p>16位窗口大小</p><ul><li>是TCP流量控制的一种手段</li><li>告诉对面本端TCP缓冲区还能容纳多少数据</li></ul></li><li><p>16位校验和</p><ul><li>由发送端填充</li><li>接收端通过CRC检验传输过程中是否损坏</li></ul></li><li><p>16位紧急指针</p><ul><li>是一个正偏移量</li><li>它和序号字段的值相加表示最后一个紧急数据的下一字节的序号</li><li>是发送端向接收端发送紧急数据的方法</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux服务器编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP/IP </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2021/07/07/test/"/>
      <url>/2021/07/07/test/</url>
      
        <content type="html"><![CDATA[<p>​    以前经常通过Typora记一些东西，也没有分类，就堆在那，久了就很乱。前段时间看了学弟搭的博客，想想自己还是动手搭一个吧。大二的时候就想搭一个，当时嫌麻烦，搁置了。</p><p>​    现在想想以后代码的路还长，虽然觉得写博客有些麻烦，不像记笔记那么随意，但可以在<del>摸鱼</del>闲着的时候写写。</p><p>​    所以搭好了，以后随缘更吧，毕竟比较懒😅</p><p><strong>下面是一些测试</strong>：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">hexo ghexo shexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>图片:</strong></p><p> <img "" class="lazyload placeholder" data-original="medias/0.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="avatar"></p><p><strong>链接</strong>:</p><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
